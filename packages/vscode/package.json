{
  "name": "gemini-coder",
  "displayName": "Code Web Chat",
  "description": "No-cost AI coding in free chatbots (CWC)",
  "version": "1.442.0",
  "scripts": {
    "build": "npx vsce package --no-dependencies",
    "vscode:prepublish": "rimraf out && npm run compile",
    "compile": "webpack --config ./webpack.config.js --mode production",
    "watch": "webpack --config ./webpack.config.js --watch --mode development",
    "lint": "eslint src --ext ts,tsx",
    "lint:fix": "eslint src --ext ts,tsx --fix",
    "test": "jest"
  },
  "publisher": "robertpiosik",
  "homepage": "https://codeweb.chat/",
  "repository": {
    "type": "git",
    "url": "https://github.com/robertpiosik/CodeWebChat"
  },
  "engines": {
    "vscode": "^1.92.0"
  },
  "sponsor": {
    "url": "https://buymeacoffee.com/robertpiosik"
  },
  "categories": [
    "Programming Languages",
    "Machine Learning",
    "AI",
    "Chat"
  ],
  "keywords": [
    "ai",
    "vibe-coding",
    "ai-assistance",
    "refactoring",
    "autocomplete",
    "commit-messages",
    "chat",
    "chatgpt",
    "gemini",
    "claude",
    "deepseek",
    "qwen",
    "mistral"
  ],
  "main": "out/extension.js",
  "activationEvents": [],
  "capabilities": {
    "virtualWorkspaces": true,
    "untrustedWorkspaces": {
      "supported": true
    }
  },
  "icon": "media/logo.png",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "codeWebChat",
          "title": "Code Web Chat",
          "icon": "resources/activity-bar-icon.svg"
        }
      ]
    },
    "views": {
      "codeWebChat": [
        {
          "id": "codeWebChatViewOpenEditors",
          "name": "Open Editors",
          "icon": "resources/activity-bar-icon.svg"
        },
        {
          "id": "codeWebChatViewContext",
          "name": "Context",
          "icon": "resources/activity-bar-icon.svg",
          "visibility": "collapsed"
        },
        {
          "id": "codeWebChatViewWorkspace",
          "name": "Workspace",
          "icon": "resources/activity-bar-icon.svg"
        },
        {
          "id": "codeWebChatViewWebsites",
          "name": "Websites",
          "icon": "resources/activity-bar-icon.svg",
          "visibility": "collapsed"
        },
        {
          "id": "codeWebChatView",
          "name": "Code Web Chat",
          "type": "webview",
          "icon": "resources/activity-bar-icon.svg"
        }
      ]
    },
    "commands": [
      {
        "command": "codeWebChat.copyContext",
        "title": "Copy Context",
        "category": "Code Web Chat",
        "icon": "$(copy)"
      },
      {
        "command": "codeWebChat.copyContextOpenEditors",
        "title": "Copy Context of Open Editors",
        "category": "Code Web Chat",
        "icon": "$(copy)"
      },
      {
        "command": "codeWebChat.applyContextFromClipboard",
        "title": "Apply Context from Clipboard",
        "category": "Code Web Chat"
      },
      {
        "command": "codeWebChat.openRepository",
        "title": "Repository",
        "category": "Code Web Chat",
        "icon": "$(github-alt)"
      },
      {
        "command": "codeWebChat.feedback",
        "title": "Feedback",
        "category": "Code Web Chat",
        "icon": "$(feedback)"
      },
      {
        "command": "codeWebChat.applyContext",
        "title": "Apply Context",
        "category": "Code Web Chat",
        "icon": "$(checklist)"
      },
      {
        "command": "codeWebChat.saveContext",
        "title": "Save Current Context",
        "category": "Code Web Chat",
        "icon": "$(save)"
      },
      {
        "command": "codeWebChat.checkAll",
        "title": "Check All",
        "category": "Code Web Chat",
        "icon": "$(check-all)"
      },
      {
        "command": "codeWebChat.clearChecks",
        "title": "Clear All Checks",
        "category": "Code Web Chat",
        "icon": "$(clear-all)"
      },
      {
        "command": "codeWebChat.collapseFolders",
        "title": "Collapse Folders",
        "category": "Code Web Chat",
        "icon": "$(collapse-all)"
      },
      {
        "command": "codeWebChat.checkAllOpenEditors",
        "title": "Check All",
        "category": "Code Web Chat",
        "icon": "$(check-all)"
      },
      {
        "command": "codeWebChat.clearChecksOpenEditors",
        "title": "Clear All Checks",
        "category": "Code Web Chat",
        "icon": "$(clear-all)"
      },
      {
        "command": "codeWebChat.closeEditor",
        "title": "Close Editor",
        "category": "Code Web Chat",
        "icon": "$(close)"
      },
      {
        "command": "codeWebChat.closeAllEditors",
        "title": "Close All Editors",
        "category": "Code Web Chat",
        "icon": "$(close-all)"
      },
      {
        "command": "codeWebChat.saveAll",
        "title": "Save All",
        "category": "Code Web Chat",
        "icon": "$(save-all)"
      },
      {
        "command": "codeWebChat.codeCompletion",
        "title": "Code Completion",
        "category": "Code Web Chat"
      },
      {
        "command": "codeWebChat.codeCompletionUsing",
        "title": "Code Completion using...",
        "category": "Code Web Chat"
      },
      {
        "command": "codeWebChat.codeCompletionWithInstructions",
        "title": "Code Completion with Instructions",
        "category": "Code Web Chat"
      },
      {
        "command": "codeWebChat.codeCompletionWithInstructionsUsing",
        "title": "Code Completion with Instructions using...",
        "category": "Code Web Chat"
      },
      {
        "command": "codeWebChat.applyChatResponse",
        "title": "Apply Chat Response",
        "category": "Code Web Chat"
      },
      {
        "command": "codeWebChat.applyCodeBlockToActiveEditor",
        "title": "Apply Code Block to Active Editor",
        "category": "Code Web Chat"
      },
      {
        "command": "codeWebChat.newFolder",
        "title": "New Folder...",
        "icon": "$(new-folder)"
      },
      {
        "command": "codeWebChat.newFile",
        "title": "New File...",
        "icon": "$(new-file)"
      },
      {
        "command": "codeWebChat.rename",
        "title": "Rename..."
      },
      {
        "command": "codeWebChat.previewWebsite",
        "title": "Preview Website Content"
      },
      {
        "command": "codeWebChat.checkAllWebsites",
        "title": "Check All",
        "category": "Code Web Chat",
        "icon": "$(check-all)"
      },
      {
        "command": "codeWebChat.clearChecksWebsites",
        "title": "Clear All Checks",
        "category": "Code Web Chat",
        "icon": "$(clear-all)"
      },
      {
        "command": "codeWebChat.delete",
        "title": "Delete"
      },
      {
        "command": "codeWebChat.undo",
        "title": "Undo Last Changes",
        "category": "Code Web Chat"
      },
      {
        "command": "codeWebChat.referenceInChat",
        "title": "Reference in Chat",
        "category": "Code Web Chat"
      },
      {
        "command": "codeWebChat.settings",
        "title": "Settings",
        "category": "Code Web Chat",
        "icon": "$(settings-gear)"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "codeWebChat.clearChecks",
          "when": "false"
        },
        {
          "command": "codeWebChat.feedback",
          "when": "false"
        },
        {
          "command": "codeWebChat.clearChecksOpenEditors",
          "when": "false"
        },
        {
          "command": "codeWebChat.checkAll",
          "when": "false"
        },
        {
          "command": "codeWebChat.checkAllOpenEditors",
          "when": "false"
        },
        {
          "command": "codeWebChat.collapseFolders",
          "when": "false"
        },
        {
          "command": "codeWebChat.closeEditor",
          "when": "false"
        },
        {
          "command": "codeWebChat.closeAllEditors",
          "when": "false"
        },
        {
          "command": "codeWebChat.saveAll",
          "when": "false"
        },
        {
          "command": "codeWebChat.newFile",
          "when": "false"
        },
        {
          "command": "codeWebChat.newFolder",
          "when": "false"
        },
        {
          "command": "codeWebChat.rename",
          "when": "false"
        },
        {
          "command": "codeWebChat.delete",
          "when": "false"
        },
        {
          "command": "codeWebChat.previewWebsite",
          "when": "false"
        },
        {
          "command": "codeWebChat.checkAllWebsites",
          "when": "false"
        },
        {
          "command": "codeWebChat.clearChecksWebsites",
          "when": "false"
        },
        {
          "command": "codeWebChat.applyContext",
          "when": "false"
        },
        {
          "command": "codeWebChat.saveContext",
          "when": "false"
        },
        {
          "command": "codeWebChat.referenceInChat",
          "when": "false"
        },
        {
          "command": "codeWebChat.openRepository",
          "when": "false"
        },
        {
          "command": "codeWebChat.applyContextFromClipboard",
          "when": "false"
        },
        {
          "command": "codeWebChat.copyContextOpenEditors",
          "when": "false"
        },
        {
          "command": "codeWebChat.copyContext",
          "when": "false"
        },
        {
          "command": "codeWebChat.settings",
          "when": "false"
        }
      ],
      "view/title": [
        {
          "command": "codeWebChat.applyContext",
          "when": "view == codeWebChatViewContext",
          "group": "navigation@1"
        },
        {
          "command": "codeWebChat.saveContext",
          "when": "view == codeWebChatViewContext",
          "group": "navigation@2"
        },
        {
          "command": "codeWebChat.checkAll",
          "when": "view == codeWebChatViewWorkspace",
          "group": "navigation@1"
        },
        {
          "command": "codeWebChat.clearChecks",
          "when": "view == codeWebChatViewWorkspace",
          "group": "navigation@2"
        },
        {
          "command": "codeWebChat.copyContext",
          "when": "view == codeWebChatViewWorkspace",
          "group": "navigation@3"
        },
        {
          "command": "codeWebChat.newFile",
          "when": "view == codeWebChatViewWorkspace",
          "group": "navigation@4"
        },
        {
          "command": "codeWebChat.newFolder",
          "when": "view == codeWebChatViewWorkspace",
          "group": "navigation@5"
        },
        {
          "command": "codeWebChat.collapseFolders",
          "when": "view == codeWebChatViewWorkspace",
          "group": "navigation@6"
        },
        {
          "command": "codeWebChat.copyContextOpenEditors",
          "when": "view == codeWebChatViewOpenEditors",
          "group": "navigation@1"
        },
        {
          "command": "codeWebChat.checkAllOpenEditors",
          "when": "view == codeWebChatViewOpenEditors",
          "group": "navigation@2"
        },
        {
          "command": "codeWebChat.clearChecksOpenEditors",
          "when": "view == codeWebChatViewOpenEditors",
          "group": "navigation@3"
        },
        {
          "command": "codeWebChat.saveAll",
          "when": "view == codeWebChatViewOpenEditors",
          "group": "navigation@4"
        },
        {
          "command": "codeWebChat.closeAllEditors",
          "when": "view == codeWebChatViewOpenEditors",
          "group": "navigation@5"
        },
        {
          "command": "codeWebChat.checkAllWebsites",
          "when": "view == codeWebChatViewWebsites",
          "group": "navigation@1"
        },
        {
          "command": "codeWebChat.clearChecksWebsites",
          "when": "view == codeWebChatViewWebsites",
          "group": "navigation@2"
        },
        {
          "command": "codeWebChat.openRepository",
          "when": "view == codeWebChatView",
          "group": "navigation@1"
        },
        {
          "command": "codeWebChat.feedback",
          "when": "view == codeWebChatView",
          "group": "navigation@2"
        },
        {
          "command": "codeWebChat.settings",
          "when": "view == codeWebChatView",
          "group": "navigation@3"
        }
      ],
      "view/item/context": [
        {
          "command": "codeWebChat.closeEditor",
          "when": "view == codeWebChatViewOpenEditors && viewItem == openEditor",
          "group": "inline"
        },
        {
          "command": "codeWebChat.rename",
          "when": "view == codeWebChatViewOpenEditors && viewItem == openEditor",
          "group": "1_modification@1"
        },
        {
          "command": "codeWebChat.delete",
          "when": "view == codeWebChatViewOpenEditors && viewItem == openEditor",
          "group": "1_modification@2"
        },
        {
          "command": "codeWebChat.referenceInChat",
          "when": "view == codeWebChatViewOpenEditors && viewItem == openEditor",
          "group": "1_modification@3"
        },
        {
          "command": "codeWebChat.newFile",
          "when": "view == codeWebChatViewWorkspace && viewItem == directory",
          "group": "1_creation@1"
        },
        {
          "command": "codeWebChat.newFolder",
          "when": "view == codeWebChatViewWorkspace && viewItem == directory",
          "group": "1_creation@2"
        },
        {
          "command": "codeWebChat.rename",
          "when": "view == codeWebChatViewWorkspace",
          "group": "1_modification@1"
        },
        {
          "command": "codeWebChat.delete",
          "when": "view == codeWebChatViewWorkspace",
          "group": "1_modification@2"
        },
        {
          "command": "codeWebChat.referenceInChat",
          "when": "view == codeWebChatViewWorkspace || view == codeWebChatViewContext",
          "group": "1_modification@3"
        }
      ]
    },
    "configuration": {
      "type": "object",
      "title": "Code Web Chat Settings",
      "properties": {
        "codeWebChat.geminiUserId": {
          "type": [
            "integer",
            "null"
          ],
          "default": null,
          "description": "Run Gemini chatbot as non-default user. Check URL for ID, e.g. gemini.google.com/u/2/app -> 2."
        },
        "codeWebChat.commitMessageInstructions": {
          "type": "string",
          "scope": "resource",
          "description": "The instructions used when generating a commit message.",
          "default": "Write a brief and precise summary for the changes, limited to a single sentence if possible and nothing else. Use an imperative tone to ensure clarity and focus on the primary change or purpose."
        },
        "codeWebChat.ignoredExtensions": {
          "type": "array",
          "description": "List of file extensions to ignore in the context.",
          "default": [
            "svg"
          ],
          "items": {
            "type": "string",
            "description": "File extension to ignore (without the dot)"
          }
        },
        "codeWebChat.editFormatInstructions": {
          "type": "object",
          "scope": "resource",
          "description": "Style of generated code blocks in \"Edit context\" mode.",
          "default": {
            "whole": "Whenever proposing a new or updated file use the Markdown Code Block syntax. It's very important to place a file path in a comment on the top of the code block. Please show me the full code of the changed files because I have a disability which means I can't type and need to be able to copy and paste the full code. Don't use XML for files.",
            "truncated": "Whenever proposing a new or updated file use the Markdown Code Block syntax. It's very important to place a full file path in a comment on the top of the code block. Use ellipsis comments, e.g. \"// ...\", when appropriate. Don't use XML for files.",
            "diff": "Whenever proposing a new or updated file use the Markdown Code Block syntax. Each code block should be a diff patch. Don't use XML for files."
          },
          "properties": {
            "whole": {
              "type": "string"
            },
            "truncated": {
              "type": "string"
            },
            "diff": {
              "type": "string"
            }
          }
        },
        "codeWebChat.chatPresetsForAskAboutContext": {
          "type": "array",
          "default": [
            {
              "name": "(0)",
              "chatbot": "ChatGPT"
            },
            {
              "name": "(1)",
              "chatbot": "Gemini"
            },
            {
              "name": "(2)",
              "chatbot": "AI Studio",
              "temperature": 0.5,
              "systemInstructions": "You're a helpful coding assistant."
            },
            {
              "name": "(3)",
              "chatbot": "Claude"
            },
            {
              "name": "(4)",
              "chatbot": "Grok"
            },
            {
              "name": "(5)",
              "chatbot": "Perplexity"
            },
            {
              "name": "(6)",
              "chatbot": "Mistral"
            },
            {
              "name": "(7)",
              "chatbot": "DeepSeek"
            },
            {
              "name": "(8)",
              "chatbot": "Qwen"
            },
            {
              "name": "(9)",
              "chatbot": "Together"
            },
            {
              "name": "(10)",
              "chatbot": "Yuanbao"
            },
            {
              "name": "(11)",
              "chatbot": "Doubao"
            },
            {
              "name": "(12)",
              "chatbot": "Kimi"
            },
            {
              "name": "(13)",
              "chatbot": "Z.AI"
            }
          ],
          "description": "Preset is a general or task specific web chat configuration.",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the preset."
              },
              "chatbot": {
                "type": "string",
                "enum": [
                  "AI Studio",
                  "Gemini",
                  "Open WebUI",
                  "OpenRouter",
                  "ChatGPT",
                  "Claude",
                  "Grok",
                  "Perplexity",
                  "Mistral",
                  "Meta",
                  "DeepSeek",
                  "Qwen",
                  "Together",
                  "Yuanbao",
                  "Doubao",
                  "Kimi",
                  "Z.AI"
                ],
                "description": "Choose among supported chatbots."
              },
              "promptPrefix": {
                "type": "string",
                "examples": [
                  "Outline the steps needed to achieve:",
                  "Draft a roadmap for accomplishing:",
                  "Propose various approaches for addressing:",
                  "Identify potential challenges in developing:",
                  "Describe the purpose of this code:",
                  "I need assistance troubleshooting this issue:",
                  "Help diagnose this error:",
                  "Generate commit message based on changes:",
                  "Write tests for:"
                ],
                "description": "Prefix prepended to all prompts sent with this chat."
              },
              "promptSuffix": {
                "type": "string",
                "examples": [
                  "Keep your response concise.",
                  "Think step by step.",
                  "Show only changed fragments.",
                  "Summarize your understanding of the problem.",
                  "Highlight what needs to change.",
                  "Detail the key considerations.",
                  "Suggest any alternative approaches.",
                  "Identify potential drawbacks.",
                  "Ask for clarifications if needed before proceeding."
                ],
                "description": "Suffix appended to all prompts sent with this chat."
              },
              "model": {
                "type": "string",
                "description": "Model to use."
              },
              "options": {
                "type": "array",
                "description": "Options to enable, e.g. canvas.",
                "items": {
                  "type": "string",
                  "description": "Option name."
                }
              },
              "temperature": {
                "type": "number",
                "description": "Temperature to use."
              },
              "topP": {
                "type": "number",
                "description": "Top P setting to use."
              },
              "systemInstructions": {
                "type": "string",
                "description": "System instructions to use."
              },
              "port": {
                "type": "number",
                "description": "Open WebUI only. Port for 'localhost', if your instance is networked, remove this param and proxy it to `http://openwebui/` with nginx."
              },
              "isSelected": {
                "type": "boolean",
                "description": "Whether this preset is selected when initializing a new chat."
              },
              "isCollapsed": {
                "type": "boolean",
                "description": "Whether this group is collapsed by default."
              }
            },
            "required": [
              "name"
            ]
          }
        },
        "codeWebChat.chatPresetsForEditContext": {
          "type": "array",
          "default": [
            {
              "name": "(0)",
              "chatbot": "ChatGPT"
            },
            {
              "name": "(1)",
              "chatbot": "Gemini"
            },
            {
              "name": "(2)",
              "chatbot": "AI Studio",
              "temperature": 0.5,
              "systemInstructions": "You're a helpful coding assistant."
            },
            {
              "name": "(3)",
              "chatbot": "Claude"
            },
            {
              "name": "(4)",
              "chatbot": "Grok"
            },
            {
              "name": "(5)",
              "chatbot": "Perplexity"
            },
            {
              "name": "(6)",
              "chatbot": "Mistral"
            },
            {
              "name": "(7)",
              "chatbot": "DeepSeek"
            },
            {
              "name": "(8)",
              "chatbot": "Qwen"
            },
            {
              "name": "(9)",
              "chatbot": "Together"
            },
            {
              "name": "(10)",
              "chatbot": "Yuanbao"
            },
            {
              "name": "(11)",
              "chatbot": "Doubao"
            },
            {
              "name": "(12)",
              "chatbot": "Kimi"
            },
            {
              "name": "(13)",
              "chatbot": "Z.AI"
            }
          ],
          "description": "Preset is a general or task specific web chat configuration.",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the preset."
              },
              "chatbot": {
                "type": "string",
                "enum": [
                  "AI Studio",
                  "Gemini",
                  "Open WebUI",
                  "OpenRouter",
                  "ChatGPT",
                  "Claude",
                  "Grok",
                  "Perplexity",
                  "Mistral",
                  "Meta",
                  "DeepSeek",
                  "Qwen",
                  "Together",
                  "Yuanbao",
                  "Doubao",
                  "Kimi",
                  "Z.AI"
                ],
                "description": "Choose among supported chatbots."
              },
              "promptPrefix": {
                "type": "string",
                "examples": [
                  "Outline the steps needed to achieve:",
                  "Draft a roadmap for accomplishing:",
                  "Propose various approaches for addressing:",
                  "Identify potential challenges in developing:",
                  "Describe the purpose of this code:",
                  "I need assistance troubleshooting this issue:",
                  "Help diagnose this error:",
                  "Generate commit message based on changes:",
                  "Write tests for:"
                ],
                "description": "Prefix prepended to all prompts sent with this chat."
              },
              "promptSuffix": {
                "type": "string",
                "examples": [
                  "Keep your response concise.",
                  "Think step by step.",
                  "Show only changed fragments.",
                  "Summarize your understanding of the problem.",
                  "Highlight what needs to change.",
                  "Detail the key considerations.",
                  "Suggest any alternative approaches.",
                  "Identify potential drawbacks.",
                  "Ask for clarifications if needed before proceeding."
                ],
                "description": "Suffix appended to all prompts sent with this chat."
              },
              "model": {
                "type": "string",
                "description": "Model to use."
              },
              "options": {
                "type": "array",
                "description": "Options to enable, e.g. canvas.",
                "items": {
                  "type": "string",
                  "description": "Option name."
                }
              },
              "temperature": {
                "type": "number",
                "description": "Temperature to use."
              },
              "topP": {
                "type": "number",
                "description": "Top P setting to use."
              },
              "systemInstructions": {
                "type": "string",
                "description": "System instructions to use."
              },
              "port": {
                "type": "number",
                "description": "Open WebUI only. Port for 'localhost', if your instance is networked, remove this param and proxy it to `http://openwebui/` with nginx."
              },
              "isSelected": {
                "type": "boolean",
                "description": "Whether this preset is selected when initializing a new chat."
              },
              "isCollapsed": {
                "type": "boolean",
                "description": "Whether this group is collapsed by default."
              }
            },
            "required": [
              "name"
            ]
          }
        },
        "codeWebChat.chatPresetsForCodeAtCursor": {
          "type": "array",
          "default": [
            {
              "name": "(0)",
              "chatbot": "ChatGPT"
            },
            {
              "name": "(1)",
              "chatbot": "Gemini"
            },
            {
              "name": "(2)",
              "chatbot": "AI Studio",
              "temperature": 0.5,
              "systemInstructions": "You're a helpful coding assistant."
            },
            {
              "name": "(3)",
              "chatbot": "Claude"
            },
            {
              "name": "(4)",
              "chatbot": "Grok"
            },
            {
              "name": "(5)",
              "chatbot": "Perplexity"
            },
            {
              "name": "(6)",
              "chatbot": "Mistral"
            },
            {
              "name": "(7)",
              "chatbot": "DeepSeek"
            },
            {
              "name": "(8)",
              "chatbot": "Qwen"
            },
            {
              "name": "(9)",
              "chatbot": "Together"
            },
            {
              "name": "(10)",
              "chatbot": "Yuanbao"
            },
            {
              "name": "(11)",
              "chatbot": "Doubao"
            },
            {
              "name": "(12)",
              "chatbot": "Kimi"
            },
            {
              "name": "(13)",
              "chatbot": "Z.AI"
            }
          ],
          "description": "Preset is a general or task specific web chat configuration.",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the preset."
              },
              "chatbot": {
                "type": "string",
                "enum": [
                  "AI Studio",
                  "Gemini",
                  "Open WebUI",
                  "OpenRouter",
                  "ChatGPT",
                  "Claude",
                  "Grok",
                  "Perplexity",
                  "Mistral",
                  "Meta",
                  "DeepSeek",
                  "Qwen",
                  "Together",
                  "Yuanbao",
                  "Doubao",
                  "Kimi",
                  "Z.AI"
                ],
                "description": "Choose among supported chatbots."
              },
              "model": {
                "type": "string",
                "description": "Model to use."
              },
              "options": {
                "type": "array",
                "description": "Options to enable, e.g. canvas.",
                "items": {
                  "type": "string",
                  "description": "Option name."
                }
              },
              "temperature": {
                "type": "number",
                "description": "Temperature to use."
              },
              "topP": {
                "type": "number",
                "description": "Top P setting to use."
              },
              "systemInstructions": {
                "type": "string",
                "description": "System instructions to use."
              },
              "port": {
                "type": "number",
                "description": "Open WebUI only. Port for 'localhost', if your instance is networked, remove this param and proxy it to `http://openwebui/` with nginx."
              },
              "isSelected": {
                "type": "boolean",
                "description": "Whether this preset is selected when initializing a new chat."
              },
              "isCollapsed": {
                "type": "boolean",
                "description": "Whether this group is collapsed by default."
              }
            },
            "required": [
              "name"
            ]
          }
        },
        "codeWebChat.chatPresetsForNoContext": {
          "type": "array",
          "default": [
            {
              "name": "(0)",
              "chatbot": "ChatGPT"
            },
            {
              "name": "(1)",
              "chatbot": "Gemini"
            },
            {
              "name": "(2)",
              "chatbot": "AI Studio",
              "temperature": 0.5,
              "systemInstructions": "You're a helpful coding assistant."
            },
            {
              "name": "(3)",
              "chatbot": "Claude"
            },
            {
              "name": "(4)",
              "chatbot": "Grok"
            },
            {
              "name": "(5)",
              "chatbot": "Perplexity"
            },
            {
              "name": "(6)",
              "chatbot": "Mistral"
            },
            {
              "name": "(7)",
              "chatbot": "DeepSeek"
            },
            {
              "name": "(8)",
              "chatbot": "Qwen"
            },
            {
              "name": "(9)",
              "chatbot": "Together"
            },
            {
              "name": "(10)",
              "chatbot": "Yuanbao"
            },
            {
              "name": "(11)",
              "chatbot": "Doubao"
            },
            {
              "name": "(12)",
              "chatbot": "Kimi"
            },
            {
              "name": "(13)",
              "chatbot": "Z.AI"
            }
          ],
          "description": "Preset is a general or task specific web chat configuration.",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the preset."
              },
              "chatbot": {
                "type": "string",
                "enum": [
                  "AI Studio",
                  "Gemini",
                  "Open WebUI",
                  "OpenRouter",
                  "ChatGPT",
                  "Claude",
                  "Grok",
                  "Perplexity",
                  "Mistral",
                  "Meta",
                  "DeepSeek",
                  "Qwen",
                  "Together",
                  "Yuanbao",
                  "Doubao",
                  "Kimi",
                  "Z.AI"
                ],
                "description": "Choose among supported chatbots."
              },
              "promptPrefix": {
                "type": "string",
                "examples": [
                  "Outline the steps needed to achieve:",
                  "Draft a roadmap for accomplishing:",
                  "Propose various approaches for addressing:",
                  "Identify potential challenges in developing:",
                  "Describe the purpose of this code:",
                  "I need assistance troubleshooting this issue:",
                  "Help diagnose this error:",
                  "Generate commit message based on changes:",
                  "Write tests for:"
                ],
                "description": "Prefix prepended to all prompts sent with this chat."
              },
              "promptSuffix": {
                "type": "string",
                "examples": [
                  "Keep your response concise.",
                  "Think step by step.",
                  "Show only changed fragments.",
                  "Summarize your understanding of the problem.",
                  "Highlight what needs to change.",
                  "Detail the key considerations.",
                  "Suggest any alternative approaches.",
                  "Identify potential drawbacks.",
                  "Ask for clarifications if needed before proceeding."
                ],
                "description": "Suffix appended to all prompts sent with this chat."
              },
              "model": {
                "type": "string",
                "description": "Model to use."
              },
              "options": {
                "type": "array",
                "description": "Options to enable, e.g. canvas.",
                "items": {
                  "type": "string",
                  "description": "Option name."
                }
              },
              "temperature": {
                "type": "number",
                "description": "Temperature to use."
              },
              "topP": {
                "type": "number",
                "description": "Top P setting to use."
              },
              "systemInstructions": {
                "type": "string",
                "description": "System instructions to use."
              },
              "port": {
                "type": "number",
                "description": "Open WebUI only. Port for 'localhost', if your instance is networked, remove this param and proxy it to `http://openwebui/` with nginx."
              },
              "isSelected": {
                "type": "boolean",
                "description": "Whether this preset is selected when initializing a new chat."
              },
              "isCollapsed": {
                "type": "boolean",
                "description": "Whether this group is collapsed by default."
              }
            },
            "required": [
              "name"
            ]
          }
        },
        "codeWebChat.promptTemplatesForAskAboutContext": {
          "type": "array",
          "default": [],
          "description": "Prompt templates for 'Ask about context' mode.",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the prompt template."
              },
              "template": {
                "type": "string",
                "description": "The prompt template."
              }
            },
            "required": [
              "template"
            ]
          }
        },
        "codeWebChat.promptTemplatesForEditContext": {
          "type": "array",
          "default": [],
          "description": "Prompt templates for 'Edit context' mode.",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the prompt template."
              },
              "template": {
                "type": "string",
                "description": "The prompt template."
              }
            },
            "required": [
              "template"
            ]
          }
        },
        "codeWebChat.promptTemplatesForCodeAtCursor": {
          "type": "array",
          "default": [],
          "description": "Prompt templates for \"Code at cursor\" mode.",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the prompt template."
              },
              "template": {
                "type": "string",
                "description": "The prompt template."
              }
            },
            "required": [
              "template"
            ]
          }
        },
        "codeWebChat.promptTemplatesForNoContext": {
          "type": "array",
          "default": [],
          "description": "Prompt templates for 'No context' mode.",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the prompt template."
              },
              "template": {
                "type": "string",
                "description": "The prompt template."
              }
            },
            "required": [
              "template"
            ]
          }
        },
        "codeWebChat.modelProviders": {
          "type": "array",
          "description": "Configuration for AI model providers. API keys are stored separately in secret storage.",
          "default": [],
          "items": {
            "oneOf": [
              {
                "type": "object",
                "title": "Built-in Provider",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Type of provider.",
                    "const": "built-in"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the built-in provider."
                  }
                },
                "required": [
                  "type",
                  "name"
                ]
              },
              {
                "type": "object",
                "title": "Custom Provider",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Type of provider.",
                    "const": "custom"
                  },
                  "name": {
                    "type": "string",
                    "description": "A unique name for the custom provider."
                  },
                  "baseUrl": {
                    "type": "string",
                    "description": "The base URL of the API endpoint for the custom provider."
                  }
                },
                "required": [
                  "type",
                  "name",
                  "baseUrl"
                ]
              }
            ]
          }
        },
        "codeWebChat.configurationsForCodeCompletions": {
          "type": "array",
          "scope": "resource",
          "description": "Configurations for the Code Completions tool.",
          "default": [],
          "items": {
            "type": "object",
            "properties": {
              "providerName": {
                "type": "string",
                "description": "Name of the model provider to use (must be defined in modelProviders)."
              },
              "model": {
                "type": "string",
                "description": "The model to use."
              },
              "temperature": {
                "type": "number",
                "description": "The temperature for the model."
              },
              "reasoningEffort": {
                "type": "string",
                "enum": [
                  "none",
                  "low",
                  "medium",
                  "high"
                ],
                "description": "The reasoning effort for the model."
              },
              "isDefault": {
                "type": "boolean",
                "description": "Whether this is the default configuration for this tool."
              }
            },
            "required": [
              "providerName",
              "model"
            ]
          }
        },
        "codeWebChat.configurationsForEditContext": {
          "type": "array",
          "scope": "resource",
          "description": "Configurations for the Edit Context tool.",
          "default": [],
          "items": {
            "type": "object",
            "properties": {
              "providerName": {
                "type": "string",
                "description": "Name of the model provider to use (must be defined in modelProviders)."
              },
              "model": {
                "type": "string",
                "description": "The model to use."
              },
              "temperature": {
                "type": "number",
                "description": "The temperature for the model."
              },
              "reasoningEffort": {
                "type": "string",
                "enum": [
                  "none",
                  "low",
                  "medium",
                  "high"
                ],
                "description": "The reasoning effort for the model."
              },
              "instructionsPlacement": {
                "type": "string",
                "enum": [
                  "above-and-below",
                  "below-only"
                ],
                "description": "Placement of instructions relative to the code context."
              }
            },
            "required": [
              "providerName",
              "model"
            ]
          }
        },
        "codeWebChat.configurationsForIntelligentUpdate": {
          "type": "array",
          "scope": "resource",
          "description": "Configurations for the Intelligent Update tool.",
          "default": [],
          "items": {
            "type": "object",
            "properties": {
              "providerName": {
                "type": "string",
                "description": "Name of the model provider to use (must be defined in modelProviders)."
              },
              "model": {
                "type": "string",
                "description": "The model to use."
              },
              "temperature": {
                "type": "number",
                "description": "The temperature for the model."
              },
              "reasoningEffort": {
                "type": "string",
                "enum": [
                  "none",
                  "low",
                  "medium",
                  "high"
                ],
                "description": "The reasoning effort for the model."
              },
              "isDefault": {
                "type": "boolean",
                "description": "Whether this is the default configuration for this tool."
              },
              "maxConcurrency": {
                "type": "number",
                "description": "Maximum number of concurrent requests."
              }
            },
            "required": [
              "providerName",
              "model"
            ]
          }
        },
        "codeWebChat.configurationsForCommitMessages": {
          "type": "array",
          "scope": "resource",
          "description": "Configurations for the Commit Messages tool.",
          "default": [],
          "items": {
            "type": "object",
            "properties": {
              "providerName": {
                "type": "string",
                "description": "Name of the model provider to use (must be defined in modelProviders)."
              },
              "model": {
                "type": "string",
                "description": "The model to use."
              },
              "temperature": {
                "type": "number",
                "description": "The temperature for the model."
              },
              "reasoningEffort": {
                "type": "string",
                "enum": [
                  "none",
                  "low",
                  "medium",
                  "high"
                ],
                "description": "The reasoning effort for the model."
              },
              "isDefault": {
                "type": "boolean",
                "description": "Whether this is the default configuration for this tool."
              }
            },
            "required": [
              "providerName",
              "model"
            ]
          }
        }
      }
    }
  },
  "devDependencies": {
    "@babel/core": "^7.27.7",
    "@babel/preset-env": "^7.27.2",
    "@babel/preset-react": "^7.27.1",
    "@babel/preset-typescript": "^7.27.1",
    "@types/he": "^1.2.3",
    "@types/jest": "^29.5.14",
    "@types/node": "20.x",
    "@types/react": "^18.2.60",
    "@types/react-dom": "^18.2.19",
    "@types/vscode": "1.92.0",
    "@types/ws": "^8.18.1",
    "@typescript-eslint/eslint-plugin": "^7.18.0",
    "@typescript-eslint/parser": "^7.18.0",
    "babel-loader": "^9.2.1",
    "clean-webpack-plugin": "^4.0.0",
    "copy-webpack-plugin": "^12.0.2",
    "css-loader": "^6.5.1",
    "eslint": "^8.57.1",
    "eslint-config-prettier": "^10.1.5",
    "eslint-plugin-react": "^7.37.5",
    "jest": "^29.7.0",
    "mini-css-extract-plugin": "^2.9.2",
    "sass-embedded": "^1.89.2",
    "sass-loader": "^12.6.0",
    "style-loader": "^3.3.4",
    "ts-jest": "^29.4.0",
    "ts-loader": "^9.5.2",
    "typed-css-modules": "^0.9.1",
    "typescript": "^5.8.3",
    "webpack": "^5.99.9",
    "webpack-cli": "^6.0.1"
  },
  "dependencies": {
    "@svgr/webpack": "^8.1.0",
    "@vscode/codicons": "^0.0.36",
    "axios": "^1.10.0",
    "bufferutil": "^4.0.9",
    "classnames": "^2.5.1",
    "dayjs": "^1.11.10",
    "diff": "^8.0.2",
    "glob": "^11.0.3",
    "he": "^1.2.0",
    "ignore": "^6.0.2",
    "marked": "^15.0.12",
    "path-browserify": "^1.0.1",
    "react": "^18.2.0",
    "react-autosize-textarea": "^7.1.0",
    "react-dom": "^18.2.0",
    "react-textarea-autosize": "^8.5.9",
    "rimraf": "^6.0.1",
    "simplebar-react": "^3.3.1",
    "ui": "workspace:*",
    "utf-8-validate": "^6.0.5",
    "ws": "^8.18.3"
  }
}
